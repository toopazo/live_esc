
# KDECAN manual
Neither RaspberryPi nor Odroid have a native CAN peripheral, therefore a CAN to
SPI bridge is neccesary. This can be done with Microchip MCP2515 CAN controller 
and a MCP2551 CAN transceiver.

## PICAN2
The hardware used is called PICAN2 and it was designed by Skpang
    http://skpang.co.uk/catalog/pican2-canbus-board-for-raspberry-pi-2-p-1475.html

The seller/distributor of this product is Copperhill
    https://copperhilltech.com
    
Python applications are run using python-can
    https://github.com/hardbyte/python-can
    https://python-can.readthedocs.io/en/stable/index.html
    
Copperhill also offers an alternative product
    https://copperhilltech.com/can-bus-plus-rs485-hat-for-raspberry-pi/
    
There is also a UAVCAN format for communication with px4
    https://uavcan.org/
    https://uavcan.org/Specification/2._Basic_concepts/

## How CAN works
To understand how CAN works these two references are recomended
    https://copperhilltech.com/blog/controller-area-network-can-bus-bus-arbitration/
    https://www.ni.com/en-my/innovations/white-papers/06/controller-area-network--can--overview.html

## KDECAN Protocol

    CAN Bus Standard Frame Structure (CAN 2.0A)    
    1bit source 
    5bit ESC ID
    5bit object
    1 54321 54321

    CAN Bus Extended Frame Structure (CAN 2.0B)
    5bit priority 
    8bit source 
    8bit destination 
    8bit object
    54321 87654321 87654321 87654321

    Examples from can-test_pi2/candump can0
    can0  18042701   [2]  56 69
    11000 00000100 00100111 00000001

    can0  01000401   [8]  B1 49 84 14 06 00 00 C8 
    00001 00000000 00000100 00000001









